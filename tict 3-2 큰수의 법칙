2021-10-12 복습 
===============================
package nadongbin;

import java.io.*;
import java.util.*;

public class Greedy2 {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		String input = br.readLine();
		StringTokenizer st = new StringTokenizer(input," ");
		
		int N =Integer.parseInt(st.nextToken()); int M=Integer.parseInt(st.nextToken()); int K=Integer.parseInt(st.nextToken()); 
		
		int[] arr = new int[N];
		
		String input2 = br.readLine();
		StringTokenizer st2 = new StringTokenizer(input2," ");
		
		for(int i=0;i<N;i++) {
			arr[i] = Integer.parseInt(st2.nextToken());
		}
		
	
		Arrays.sort(arr);
		int sum =0;
		int cnt =0;
		
		for(int i=0;i<M;i++) {
			
			if(K > cnt) { 
				sum+=arr[N-1];
				cnt++;
			}else {
				sum+=arr[N-2];
				cnt=0;
			}
			
		}//for
		
		
		System.out.println(sum);

	}
}
========================================================================================
나동빈 님꺼는 for문을 돌리지 않아 시간복잡도가 더효율적일 거 같다. 메인 안에 실행시간을 계산해보니 둘다 비슷하게 나오긴함... 뭐가 더 효율적일까?

 public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // N, M, K를 공백을 기준으로 구분하여 입력 받기
        int n = sc.nextInt();
        int m = sc.nextInt();
        int k = sc.nextInt();

        // N개의 수를 공백을 기준으로 구분하여 입력 받기
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        Arrays.sort(arr); // 입력 받은 수들 정렬하기
        int first = arr[n - 1]; // 가장 큰 수
        int second = arr[n - 2]; // 두 번째로 큰 수

        // 가장 큰 수가 더해지는 횟수 계산
        int cnt = (m / (k + 1)) * k;
        cnt += m % (k + 1);

        int result = 0;
        result += cnt * first; // 가장 큰 수 더하기
        result += (m - cnt) * second; // 두 번째로 큰 수 더하기

        System.out.println(result);
    }

