import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Node5 {

    private int x;
    private int y;

    public Node5(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() {
        return this.x;
    }
    
    public int getY() {
        return this.y;
    }
}

public class test4 {
	
	static int[][] map;
	static int N,M; 
	
	//상 하 좌 우 
	static int[] dx = {-1,1,0,0};
	static int[] dy = {0,0,-1,1};
	
	
	public static void main(String[] args) throws IOException{
	
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));		
		
		StringTokenizer st = new StringTokenizer(br.readLine());	
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		
			 map = new int[N][M];
			
			
			for(int i = 0 ; i < N ; i++) {
				String str = br.readLine();
				char[] ch = str.toCharArray();
				
				for(int j = 0 ; j < ch.length ; j++) {
					map[i][j] = Character.getNumericValue(ch[j]);
				}
			}
			bfs(0,0);
			
			System.out.println(map[N-1][M-1]);
		
	}

	static void bfs(int x, int y){
		Queue<Node5> q = new LinkedList<>();
		
		q.offer(new Node5(x,y));
		
		while(!q.isEmpty()){
			Node5 node1 = q.poll();
			x = node1.getX();
			y = node1.getY();
			
		try{	
			for(int i=0;i<4;i++){
				int nx = x + dx[i];
				int ny = y + dy[i];
			
			 if(nx <0 || ny <0 || nx >=N || ny >= M) continue;
			
			 if(map[nx][ny] == 0) continue;
			 
			 if(map[nx][ny] == 1){
				 map[nx][ny] = map[x][y]+1;
				 q.offer(new Node5(nx ,ny));
			 }			 
				 
			}		
			
			
		}catch(Exception e){
			e.printStackTrace();
		}	
		
		}
		
		
		
		
	}

}
